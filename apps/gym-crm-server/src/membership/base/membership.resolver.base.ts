/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Membership } from "./Membership";
import { MembershipCountArgs } from "./MembershipCountArgs";
import { MembershipFindManyArgs } from "./MembershipFindManyArgs";
import { MembershipFindUniqueArgs } from "./MembershipFindUniqueArgs";
import { CreateMembershipArgs } from "./CreateMembershipArgs";
import { UpdateMembershipArgs } from "./UpdateMembershipArgs";
import { DeleteMembershipArgs } from "./DeleteMembershipArgs";
import { MemberFindManyArgs } from "../../member/base/MemberFindManyArgs";
import { Member } from "../../member/base/Member";
import { MembershipService } from "../membership.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Membership)
export class MembershipResolverBase {
  constructor(
    protected readonly service: MembershipService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Membership",
    action: "read",
    possession: "any",
  })
  async _membershipsMeta(
    @graphql.Args() args: MembershipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Membership])
  @nestAccessControl.UseRoles({
    resource: "Membership",
    action: "read",
    possession: "any",
  })
  async memberships(
    @graphql.Args() args: MembershipFindManyArgs
  ): Promise<Membership[]> {
    return this.service.memberships(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Membership, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Membership",
    action: "read",
    possession: "own",
  })
  async membership(
    @graphql.Args() args: MembershipFindUniqueArgs
  ): Promise<Membership | null> {
    const result = await this.service.membership(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Membership)
  @nestAccessControl.UseRoles({
    resource: "Membership",
    action: "create",
    possession: "any",
  })
  async createMembership(
    @graphql.Args() args: CreateMembershipArgs
  ): Promise<Membership> {
    return await this.service.createMembership({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Membership)
  @nestAccessControl.UseRoles({
    resource: "Membership",
    action: "update",
    possession: "any",
  })
  async updateMembership(
    @graphql.Args() args: UpdateMembershipArgs
  ): Promise<Membership | null> {
    try {
      return await this.service.updateMembership({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Membership)
  @nestAccessControl.UseRoles({
    resource: "Membership",
    action: "delete",
    possession: "any",
  })
  async deleteMembership(
    @graphql.Args() args: DeleteMembershipArgs
  ): Promise<Membership | null> {
    try {
      return await this.service.deleteMembership(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Member], { name: "members" })
  @nestAccessControl.UseRoles({
    resource: "Member",
    action: "read",
    possession: "any",
  })
  async findMembers(
    @graphql.Parent() parent: Membership,
    @graphql.Args() args: MemberFindManyArgs
  ): Promise<Member[]> {
    const results = await this.service.findMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
