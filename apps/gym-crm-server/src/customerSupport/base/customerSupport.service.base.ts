/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CustomerSupport as PrismaCustomerSupport,
  Member as PrismaMember,
} from "@prisma/client";

export class CustomerSupportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerSupportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerSupport.count(args);
  }

  async customerSupports<T extends Prisma.CustomerSupportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerSupportFindManyArgs>
  ): Promise<PrismaCustomerSupport[]> {
    return this.prisma.customerSupport.findMany<Prisma.CustomerSupportFindManyArgs>(
      args
    );
  }
  async customerSupport<T extends Prisma.CustomerSupportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerSupportFindUniqueArgs>
  ): Promise<PrismaCustomerSupport | null> {
    return this.prisma.customerSupport.findUnique(args);
  }
  async createCustomerSupport<T extends Prisma.CustomerSupportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerSupportCreateArgs>
  ): Promise<PrismaCustomerSupport> {
    return this.prisma.customerSupport.create<T>(args);
  }
  async updateCustomerSupport<T extends Prisma.CustomerSupportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerSupportUpdateArgs>
  ): Promise<PrismaCustomerSupport> {
    return this.prisma.customerSupport.update<T>(args);
  }
  async deleteCustomerSupport<T extends Prisma.CustomerSupportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerSupportDeleteArgs>
  ): Promise<PrismaCustomerSupport> {
    return this.prisma.customerSupport.delete(args);
  }

  async getMember(parentId: string): Promise<PrismaMember | null> {
    return this.prisma.customerSupport
      .findUnique({
        where: { id: parentId },
      })
      .member();
  }
}
