/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerSupport } from "./CustomerSupport";
import { CustomerSupportCountArgs } from "./CustomerSupportCountArgs";
import { CustomerSupportFindManyArgs } from "./CustomerSupportFindManyArgs";
import { CustomerSupportFindUniqueArgs } from "./CustomerSupportFindUniqueArgs";
import { CreateCustomerSupportArgs } from "./CreateCustomerSupportArgs";
import { UpdateCustomerSupportArgs } from "./UpdateCustomerSupportArgs";
import { DeleteCustomerSupportArgs } from "./DeleteCustomerSupportArgs";
import { Member } from "../../member/base/Member";
import { CustomerSupportService } from "../customerSupport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerSupport)
export class CustomerSupportResolverBase {
  constructor(
    protected readonly service: CustomerSupportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerSupport",
    action: "read",
    possession: "any",
  })
  async _customerSupportsMeta(
    @graphql.Args() args: CustomerSupportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerSupport])
  @nestAccessControl.UseRoles({
    resource: "CustomerSupport",
    action: "read",
    possession: "any",
  })
  async customerSupports(
    @graphql.Args() args: CustomerSupportFindManyArgs
  ): Promise<CustomerSupport[]> {
    return this.service.customerSupports(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerSupport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerSupport",
    action: "read",
    possession: "own",
  })
  async customerSupport(
    @graphql.Args() args: CustomerSupportFindUniqueArgs
  ): Promise<CustomerSupport | null> {
    const result = await this.service.customerSupport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerSupport)
  @nestAccessControl.UseRoles({
    resource: "CustomerSupport",
    action: "create",
    possession: "any",
  })
  async createCustomerSupport(
    @graphql.Args() args: CreateCustomerSupportArgs
  ): Promise<CustomerSupport> {
    return await this.service.createCustomerSupport({
      ...args,
      data: {
        ...args.data,

        member: args.data.member
          ? {
              connect: args.data.member,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerSupport)
  @nestAccessControl.UseRoles({
    resource: "CustomerSupport",
    action: "update",
    possession: "any",
  })
  async updateCustomerSupport(
    @graphql.Args() args: UpdateCustomerSupportArgs
  ): Promise<CustomerSupport | null> {
    try {
      return await this.service.updateCustomerSupport({
        ...args,
        data: {
          ...args.data,

          member: args.data.member
            ? {
                connect: args.data.member,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerSupport)
  @nestAccessControl.UseRoles({
    resource: "CustomerSupport",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerSupport(
    @graphql.Args() args: DeleteCustomerSupportArgs
  ): Promise<CustomerSupport | null> {
    try {
      return await this.service.deleteCustomerSupport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Member, {
    nullable: true,
    name: "member",
  })
  @nestAccessControl.UseRoles({
    resource: "Member",
    action: "read",
    possession: "any",
  })
  async getMember(
    @graphql.Parent() parent: CustomerSupport
  ): Promise<Member | null> {
    const result = await this.service.getMember(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
