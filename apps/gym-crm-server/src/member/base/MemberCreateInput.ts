/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested, IsDate } from "class-validator";
import { AppointmentCreateNestedManyWithoutMembersInput } from "./AppointmentCreateNestedManyWithoutMembersInput";
import { Type } from "class-transformer";
import { AttendanceCreateNestedManyWithoutMembersInput } from "./AttendanceCreateNestedManyWithoutMembersInput";
import { CustomerSupportCreateNestedManyWithoutMembersInput } from "./CustomerSupportCreateNestedManyWithoutMembersInput";
import { MembershipWhereUniqueInput } from "../../membership/base/MembershipWhereUniqueInput";

@InputType()
class MemberCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address?: string | null;

  @ApiProperty({
    required: false,
    type: () => AppointmentCreateNestedManyWithoutMembersInput,
  })
  @ValidateNested()
  @Type(() => AppointmentCreateNestedManyWithoutMembersInput)
  @IsOptional()
  @Field(() => AppointmentCreateNestedManyWithoutMembersInput, {
    nullable: true,
  })
  appointments?: AppointmentCreateNestedManyWithoutMembersInput;

  @ApiProperty({
    required: false,
    type: () => AttendanceCreateNestedManyWithoutMembersInput,
  })
  @ValidateNested()
  @Type(() => AttendanceCreateNestedManyWithoutMembersInput)
  @IsOptional()
  @Field(() => AttendanceCreateNestedManyWithoutMembersInput, {
    nullable: true,
  })
  attendances?: AttendanceCreateNestedManyWithoutMembersInput;

  @ApiProperty({
    required: false,
    type: () => CustomerSupportCreateNestedManyWithoutMembersInput,
  })
  @ValidateNested()
  @Type(() => CustomerSupportCreateNestedManyWithoutMembersInput)
  @IsOptional()
  @Field(() => CustomerSupportCreateNestedManyWithoutMembersInput, {
    nullable: true,
  })
  customerSupports?: CustomerSupportCreateNestedManyWithoutMembersInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => MembershipWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => MembershipWhereUniqueInput)
  @IsOptional()
  @Field(() => MembershipWhereUniqueInput, {
    nullable: true,
  })
  membership?: MembershipWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone?: string | null;
}

export { MemberCreateInput as MemberCreateInput };
